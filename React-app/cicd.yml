name: = CI/CD DEV =

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]
env:
  IMAGE_NAME: 'react'

jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get current version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master

      - name: Change Nginx config
        run: sed -i 's|sample.com|${{ secrets.CI_DOMAIN_DEV }}|g' nginx.conf

      - name: Change domain API
        run: sed -i 's|CI_API_URL|${{ secrets.CI_DOMAIN_DEV_API }}|g' .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login Nexus
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.NEXUS_REGISTRY }}
          username: ${{ secrets.NEXUS_USERNAME }}
          password: ${{ secrets.NEXUS_PASSWORD }}
          logout: true

      - name: Build and push image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.NEXUS_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.package-version.outputs.current-version }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
    outputs:
      image_version: ${{ steps.package-version.outputs.current-version }}

  scan-image:
    needs: build-image
    runs-on: ubuntu-latest
    steps:
      - name: Scan image
        uses: azure/container-scan@v0
        with:
          image-name: ${{ secrets.NEXUS_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-image.outputs.image_version }}
          username: ${{ secrets.NEXUS_USERNAME }}
          password: ${{ secrets.NEXUS_PASSWORD }}

  deploy-image:
    needs: build-image
    runs-on: ubuntu-latest
    steps:
      - name: Deploy image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SSH_HOST }}
          username: ${{ secrets.DEV_SSH_USERNAME }}
          key: ${{ secrets.DEV_SSH_KEY }}
          port: ${{ secrets.DEV_SSH_PORT }}
          script_stop: true
          script: |
            sudo docker login https://${{ secrets.NEXUS_REGISTRY }} -u ${{ secrets.NEXUS_USERNAME }} -p ${{ secrets.NEXUS_PASSWORD }}
            sudo docker pull ${{ secrets.NEXUS_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-image.outputs.image_version }}
            sudo docker rm -f ${{ env.IMAGE_NAME }} &> /dev/null
            sudo docker run -d -it -p ${{ secrets.PORT_REACT_DEV }} --name ${{ env.IMAGE_NAME }} ${{ secrets.NEXUS_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-image.outputs.image_version }}
            sudo docker ps
            sudo docker logout https://${{ secrets.NEXUS_REGISTRY }}

  slack-notify:
    needs:
      - build-image
      - deploy-image
      - scan-image
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Slack notification
        uses: come25136/workflow-notification-for-slack@main
        with:
          repo_token: ${{secrets.GITHUB_TOKEN}}
          slack_webhook_url: ${{secrets.SLACK_WEBHOOK_URL}}